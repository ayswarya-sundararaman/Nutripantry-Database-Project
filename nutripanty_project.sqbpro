<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/ayswarya/Documents/NEU docs/dBMS/nutripanty_erd.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="0"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1808"/><column_width id="4" width="0"/><expanded_item id="2" parent="0"/><expanded_item id="3" parent="0"/><expanded_item id="4" parent="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,11:mainIngredients"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Ingredients" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="78"/><column index="2" value="66"/><column index="3" value="54"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Insert_and_Select">delete from Users; 
delete from  Shopping_List;
delete from Shopping_List_Ingredients;
delete from Ingredients;
delete from Users_Health_Goals;
delete from User_Dietry_Preferences;
delete from Meals;
delete from Meal_Ingredients;
delete from Instructions ; 
delete from Pantry_Inventory;



------CREATE TABLE COMMANDS --------------------------------------------------

CREATE TABLE &quot;Users&quot; (
&quot;user_id&quot; INTEGER(10),
&quot;name&quot; TEXT, 
&quot;age&quot; INTEGER(10), &quot;
gender&quot; char(1), &quot;phone_number&quot; VARCHAR(15), 
&quot;address&quot; TEXT, 
&quot;country&quot; VARCHAR(50),
 &quot;zipcode&quot; VARCHAR(10), &quot;activity_levels&quot; VARCHAR(50), PRIMARY KEY(&quot;user_id&quot;) )


CREATE TABLE
&quot;User_Dietry_Preferences&quot;
(
&quot;user_dietry_preference_id&quot; INTEGER(10),
&quot;fk_user_id&quot; INTEGER(10),
&quot;diet_name&quot; VARCHAR(50), PRIMARY KEY(&quot;user_dietry_preference_id&quot;), 
FOREIGN KEY(&quot;fk_user_id&quot;) REFERENCES &quot;Users&quot;(&quot;user_id&quot;) )
 
 CREATE TABLE
&quot;Users_Health_Goals&quot; (
&quot;user_health_goals_id&quot; INTEGER(10), 
&quot;fk_user_id&quot; INTEGER(10), 
&quot;goal_name&quot; varchar(50), PRIMARY KEY(&quot;user_health_goals_id&quot;),
 FOREIGN KEY(&quot;fk_user_id&quot;) REFERENCES &quot;Users&quot;(&quot;user_id&quot;) )

CREATE TABLE &quot;Ingredients&quot;
( &quot;Ingredient_id&quot;
INTEGER(10), &quot;name&quot;TEXT(500), &quot;category&quot; varchar(50), PRIMARY KEY(&quot;Ingredient_id&quot;) )

CREATE TABLE &quot;Meals&quot; (
&quot;meal_id&quot; INTEGER(10),
&quot;meal_name&quot; varchar(100),
&quot;category&quot; varchar(50),
&quot;prep_time&quot; INTEGER(20),
&quot;nutritional_info&quot;
TEXT(500), &quot;ingredients&quot;
TEXT(500), PRIMARY KEY(&quot;meal_id&quot;) )

CREATE TABLE
&quot;Instructions&quot; (
&quot;Instruction_id&quot; INTEGER(10), &quot;fk_meal_id&quot; INTEGER(10), &quot;step_number&quot; INTEGER(10), &quot;description&quot;
TEXT(500), PRIMARY KEY(&quot;Instruction_id&quot;), FOREIGN KEY(&quot;fk_meal_id&quot;) REFERENCES &quot;Meals&quot;(&quot;meal_id&quot;) )



CREATE TABLE
&quot;Meal_Ingredients&quot; (
&quot;meal_ingredient_id&quot; INTEGER(10), &quot;fk_ingredient_id&quot; INTEGER(10), &quot;fk_meal_id&quot; INTEGER(10),
&quot;ingredient_quantity&quot; INTEGER(10), PRIMARY KEY(&quot;meal_ingredient_id&quot;),
FOREIGN KEY(&quot;fk_meal_id&quot;) REFERENCES &quot;Meals&quot;(&quot;meal_id&quot;),
FOREIGN KEY(&quot;fk_ingredient_id&quot;) REFERENCES &quot;Ingredients&quot;(&quot;Ingredient_id&quot;) )


CREATE TABLE
&quot;Pantry_Inventory&quot; (
&quot;pantry_id&quot; INTEGER(10),
&quot;fk_user_id&quot; INTEGER(10),
&quot;fk_ingredient_id&quot; INTEGER(10),
&quot;pantry_quantity&quot; INTEGER(10),
&quot;expiration_date&quot; DATE,
&quot;last_updated&quot; DATE,
PRIMARY KEY(&quot;pantry_id&quot;),
FOREIGN KEY(&quot;fk_user_id&quot;) REFERENCES &quot;Users&quot;(&quot;user_id&quot;), 
FOREIGN KEY(&quot;fk_ingredient_id&quot;)REFERENCES&quot;Ingredients&quot;(&quot;Ingredient_id&quot;) )


CREATE TABLE
&quot;Shopping_List&quot; (
&quot;list_id&quot; INTEGER(10),
&quot;fk_user_id&quot; INTEGER(10),
PRIMARY KEY(&quot;list_id&quot;),
FOREIGN KEY(&quot;fk_user_id&quot;) REFERENCES &quot;Users&quot;(&quot;user_id&quot;) )


CREATE TABLE &quot;Shopping_List_Ingredients &quot;( &quot;shopping_ingredients_id&quot; INTEGER(10), &quot;fk_list_id&quot; INTEGER(10), &quot;fk_ingredient_id&quot; INTEGER(10), &quot;quantity_needed&quot; INTEGER(10), 
&quot;status&quot; INTEGER(10), PRIMARY KEY(&quot;shopping_ingredients_ id&quot;), FOREIGN KEY(&quot;fk_ingredient_id&quot;) REFERENCES,&quot;Ingredients&quot;(&quot;Ingredient_id&quot;), FOREIGN KEY(&quot;fk_list_id&quot;) REFERENCES &quot;Shopping_List&quot;(&quot;list_id&quot;))


 
 
 
----- INSERT COMMANDS ------------------------------------------------------------------

INSERT INTO Users (user_id, name, age, gender, phone_number, address, country, zipcode, activity_levels)
VALUES 
(1, 'Ivy Martin', 29, 'F', '111-222-3333', '321 Oak St', 'USA', '33456', 'High'),
(2, 'Jack Turner', 33, 'M', '444-555-6666', '654 Pine St', 'USA', '66789', 'Medium');


INSERT INTO User_Dietry_Preferences (user_dietry_preference_id, fk_user_id, diet_name)
VALUES 
(1, 1, 'Vegan'),
(2, 2, 'Paleo');


INSERT INTO Users_Health_Goals (user_health_goals_id, fk_user_id, goal_name)
VALUES 
(1, 1, 'Improve Sleep Quality'),
(2, 2, 'Increase Muscle Mass');


INSERT INTO Ingredients (ingredient_id, name, category)
VALUES 
(1, 'Blueberries', 'Fruit'),
(2, 'Avocado', 'Fruit');

INSERT INTO Pantry_Inventory (pantry_id, fk_user_id, fk_ingredient_id, pantry_quantity, expiration_date, last_updated)
VALUES 
(1, 1, 1, 5, '2024-07-10', '2024-06-23'),
(2, 2, 2, 3, '2024-07-20', '2024-06-23');


INSERT INTO Meals (meal_id, meal_name, category, prep_time, nutritional_info, ingredients)
VALUES 
(1, 'Blueberry Smoothie', 'Smoothie', 10, 'High antioxidants, low calorie', 'Blueberries, Yogurt, Spinach'),
(2, 'Avocado Toast', 'Breakfast', 5, 'Healthy fats, high fiber', 'Avocado, Bread, Olive Oil');

select * from ingredients  ; 

INSERT INTO Meal_Ingredients (meal_ingredient_id, fk_ingredient_id, fk_meal_id, ingredient_quantity)
VALUES 
(1, 1, 1, 100),
(2, 2, 2, 1);


INSERT INTO Instructions (instruction_id, fk_meal_id, step_number, description)
VALUES 
(1, 1, 1, 'Blend blueberries, yogurt, and spinach until smooth.'),
(2, 1, 2, 'Serve immediately or chill for later.'),
(3, 2, 1, 'Toast the bread.'),
(4, 2, 2, 'Mash the avocado and spread it on the toast.'),
(5, 2, 3, 'Drizzle with olive oil and serve.');


INSERT INTO Shopping_List (list_id, fk_user_id)
VALUES 
(1, 1),
(2, 2);

INSERT INTO Shopping_List_Ingredients (shopping_ingredients_id, fk_list_id, fk_ingredient_id, status)
VALUES 
(1, 1, 1, 0),  -- Ivy Martin needs 2 more units of Blueberries for her meal
(2, 1, 2, 0),  -- Ivy Martin needs 1 unit of Avocado for her meal (assuming a different meal that requires Avocado)
(3, 2, 2, 0);  -- Jack Turner needs 1 more unit of Avocado for his meal



----- SELECT STATEMENTS ------------------------------------------------------------------------------

-- Retrieve the dietary preferences of each user.

SELECT u.name, udp.diet_name
FROM Users u
JOIN User_Dietry_Preferences udp ON u.user_id = udp.fk_user_id;

--  Calculate and retrieve the quantity of ingredients needed for shopping, considering pantry inventory.
SELECT 
    u.name, 
    sl.list_id AS fk_list_id, 
    mi.ingredient_quantity - COALESCE(pi.pantry_quantity, 0) AS quantity_needed, 
    i.name AS ingredient_name
FROM 
    Users u
JOIN 
    Shopping_List sl ON u.user_id = sl.fk_user_id
JOIN 
    Shopping_List_Ingredients sli ON sl.list_id = sli.fk_list_id
JOIN 
    Ingredients i ON sli.fk_ingredient_id = i.ingredient_id
JOIN 
    Meal_Ingredients mi ON mi.fk_ingredient_id = i.ingredient_id
LEFT JOIN 
    Pantry_Inventory pi ON u.user_id = pi.fk_user_id AND i.ingredient_id = pi.fk_ingredient_id
WHERE 
    (mi.ingredient_quantity - COALESCE(pi.pantry_quantity, 0)) &gt; 0;


--Retrieve the health goals of each user.
SELECT u.name, uhg.goal_name
FROM Users u
JOIN Users_Health_Goals uhg ON u.user_id = uhg.fk_user_id;

--Retrieve the pantry inventory details for each user, including ingredient quantities and expiration dates.
SELECT u.name, i.name AS ingredient_name, pi.pantry_quantity, pi.expiration_date
FROM Users u
JOIN Pantry_Inventory pi ON u.user_id = pi.fk_user_id
JOIN Ingredients i ON pi.fk_ingredient_id = i.ingredient_id;


--Retrieve the ingredients and preparation instructions for each meal, ordered by meal name and step number.
SELECT m.meal_name, i.name AS ingredient_name, mi.ingredient_quantity, ins.step_number, ins.description
FROM Meals m
JOIN Meal_Ingredients mi ON m.meal_id = mi.fk_meal_id
JOIN Ingredients i ON mi.fk_ingredient_id = i.ingredient_id
JOIN Instructions ins ON m.meal_id = ins.fk_meal_id
ORDER BY m.meal_name, ins.step_number;


</sql><current_tab id="0"/></tab_sql></sqlb_project>
